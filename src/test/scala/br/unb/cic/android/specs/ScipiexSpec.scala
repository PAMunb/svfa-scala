package br.unb.cic.android.specs

import br.unb.cic.android.TaintBenchSpec

trait ScipiexSpec extends TaintBenchSpec {
//  URL https://github.com/TaintBench/scipiex/blob/master/README.md
  override val sourceList = List(
    "<org.apache.http.util.EntityUtils: java.lang.String getContentCharSet(org.apache.http.HttpEntity)>",
    "<java.io.ByteArrayOutputStream: byte[] toByteArray()>",
    "<javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>",
    "<org.apache.http.message.BasicHttpRequest: org.apache.http.RequestLine getRequestLine()>",
    "<java.util.LinkedList: java.lang.Object getFirst()>",
    "<org.apache.http.util.EncodingUtils: byte[] getBytes(java.lang.String,java.lang.String)>",
    "<org.apache.http.auth.AuthState: org.apache.http.auth.AuthScope getAuthScope()>",
    "<java.net.InetAddress: java.lang.String getHostName()>",
    "<java.util.Properties: void load(java.io.InputStream)>",
    "<org.apache.http.impl.client.DefaultRequestDirector: boolean createTunnelToTarget(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>",
    "<org.apache.http.impl.auth.RFC2617Scheme: java.lang.String getParameter(java.lang.String)>",
    "<org.apache.http.entity.HttpEntityWrapper: java.io.InputStream getContent()>",
    "<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.ConnectionReuseStrategy getConnectionReuseStrategy()>",
    "<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.HttpRequestExecutor createRequestExecutor()>",
    "<java.net.Socket: int getSendBufferSize()>",
    "<java.net.URI: java.lang.String getRawFragment()>",
    "<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>",
    "<java.net.InetAddress: java.lang.String getHostAddress()>",
    "<org.apache.http.client.methods.HttpRequestBase: org.apache.http.ProtocolVersion getProtocolVersion()>",
    "<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationHandler getTargetAuthenticationHandler()>",
    "<java.io.File: java.lang.String getName()>",
    "<java.lang.String: byte[] getBytes()>",
    "<java.util.Calendar: java.util.Calendar getInstance()>",
    "<org.apache.http.impl.cookie.AbstractCookieSpec: org.apache.http.cookie.CookieAttributeHandler findAttribHandler(java.lang.String)>",
    "<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>",
    "<java.io.File: java.lang.String getPath()>",
    "<org.apache.http.impl.auth.DigestScheme: java.lang.String getQopVariantString()>",
    "<org.apache.http.protocol.BasicHttpProcessor: int getRequestInterceptorCount()>",
    "<org.apache.http.auth.AuthScope: java.lang.String getRealm()>",
    "<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry)>",
    "<org.apache.http.impl.cookie.BestMatchSpec: org.apache.http.impl.cookie.RFC2965Spec getStrict()>",
    "<java.net.URISyntaxException: java.lang.String getMessage()>",
    "<java.net.Socket: java.net.InetAddress getInetAddress()>",
    "<org.apache.http.conn.routing.RouteTracker: org.apache.http.HttpHost getTargetHost()>",
    "<java.io.BufferedReader: java.lang.String readLine()>",
    "<org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getCNs(java.security.cert.X509Certificate)>",
    "<java.net.URI: java.lang.String getRawQuery()>",
    "<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: int getConnectionsInPool(org.apache.http.conn.routing.HttpRoute)>",
    "<org.apache.http.impl.client.RequestWrapper: org.apache.http.ProtocolVersion getProtocolVersion()>",
    "<org.apache.http.entity.BasicHttpEntity: java.io.InputStream getContent()>",
    "<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>",
    "<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme getScheme(java.lang.String)>",
    "<org.apache.http.auth.params.AuthParams: java.lang.String getCredentialCharset(org.apache.http.params.HttpParams)>",
    "<android.content.Intent: java.lang.String getAction()>",
    "<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry)>",
    "<org.apache.http.conn.scheme.Scheme: org.apache.http.conn.scheme.SocketFactory getSocketFactory()>",
    "<org.apache.http.impl.client.RequestWrapper: java.lang.String getMethod()>",
    "<java.lang.Throwable: java.lang.String getMessage()>",
    "<org.apache.http.message.ParserCursor: int getPos()>",
    "<java.math.BigInteger: byte[] toByteArray()>",
    "<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>",
    "<org.apache.http.impl.io.ChunkedInputStream: int getChunkSize()>",
    "<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ConnectionKeepAliveStrategy getConnectionKeepAliveStrategy()>",
    "<org.apache.http.impl.cookie.RFC2965Spec: org.apache.http.Header getVersionHeader()>",
    "<org.apache.http.params.HttpProtocolParams: java.lang.String getHttpElementCharset(org.apache.http.params.HttpParams)>",
    "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)>",
    "<org.apache.http.client.utils.URIUtils: java.net.URI resolve(java.net.URI,java.net.URI)>",
    "<org.apache.http.client.utils.URLEncodedUtils: java.lang.String decode(java.lang.String,java.lang.String)>",
    "<java.util.HashMap: java.lang.Object get(java.lang.Object)>",
    "<org.apache.http.auth.BasicUserPrincipal: java.lang.String getName()>",
    "<org.apache.http.impl.client.RequestWrapper: java.net.URI getURI()>",
    "<java.lang.StringBuffer: void getChars(int,int,char[],int)>",
    "<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.UserTokenHandler getUserTokenHandler()>",
    "<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>",
    "<android.os.Bundle: java.lang.Object get(java.lang.String)>",
    "<org.apache.http.auth.NTCredentials: java.lang.String getWorkstation()>",
    "<org.apache.http.util.ByteArrayBuffer: byte[] buffer()>",
    "<org.apache.http.protocol.BasicHttpProcessor: org.apache.http.HttpRequestInterceptor getRequestInterceptor(int)>",
    "<java.net.URI: java.lang.String getScheme()>",
    "<org.apache.http.impl.auth.DigestScheme: java.lang.String createDigest(org.apache.http.auth.Credentials)>",
    "<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>",
    "<org.apache.http.impl.client.RoutedRequest: org.apache.http.impl.client.RequestWrapper getRequest()>",
    "<org.apache.http.impl.io.ContentLengthInputStream: int read(byte[],int,int)>",
    "<org.apache.http.impl.io.ChunkedInputStream: int read(byte[],int,int)>",
    "<org.apache.http.protocol.BasicHttpContext: java.lang.Object getAttribute(java.lang.String)>",
    "<org.apache.http.conn.routing.HttpRoute: int getHopCount()>",
    "<java.util.Date: long getTime()>",
    "<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.io.HttpMessageParser createResponseParser(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpResponseFactory,org.apache.http.params.HttpParams)>",
    "<org.apache.http.impl.conn.tsccm.RouteSpecificPool: int getCapacity()>",
    "<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>",
    "<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>",
    "<java.text.DateFormat: java.lang.String format(java.util.Date)>",
    "<android.telephony.TelephonyManager: java.lang.String getDeviceId()>",
    "<org.apache.http.auth.AuthState: org.apache.http.auth.AuthScheme getAuthScheme()>",
    "<org.apache.http.conn.params.ConnRouteParams: org.apache.http.HttpHost getDefaultProxy(org.apache.http.params.HttpParams)>",
    "<java.lang.Class: java.lang.ClassLoader getClassLoader()>",
    "<org.apache.http.cookie.CookieOrigin: int getPort()>",
    "<java.lang.ref.SoftReference: java.lang.Object get()>",
    "<org.apache.http.impl.conn.tsccm.BasicPoolEntry: org.apache.http.conn.OperatedClientConnection getConnection()>",
    "<java.lang.String: void getChars(int,int,char[],int)>",
    "<android.database.Cursor: java.lang.String getString(int)>",
    "<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor getHttpProcessor()>",
    "<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.impl.client.RoutedRequest handleResponse(org.apache.http.impl.client.RoutedRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>",
    "<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor,char[])>",
    "<org.apache.http.auth.AuthState: org.apache.http.auth.Credentials getCredentials()>",
    "<org.apache.http.impl.client.RequestWrapper: org.apache.http.RequestLine getRequestLine()>",
    "<org.apache.http.conn.params.ConnManagerParams: int getMaxTotalConnections(org.apache.http.params.HttpParams)>",
    "<org.apache.http.impl.auth.DigestScheme: java.lang.String getCnonce()>",
    "<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationHandler getProxyAuthenticationHandler()>",
    "<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.conn.ManagedClientConnection getConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)>",
    "<org.apache.http.impl.conn.tsccm.BasicPoolEntry: org.apache.http.conn.routing.HttpRoute getPlannedRoute()>",
    "<org.apache.http.impl.conn.tsccm.RouteSpecificPool: int getMaxEntries()>",
    "<org.apache.http.impl.conn.AbstractClientConnAdapter: org.apache.http.conn.OperatedClientConnection getWrappedConnection()>",
    "<java.net.URI: java.lang.String getAuthority()>",
    "<org.apache.http.conn.params.ConnManagerParams: long getTimeout(org.apache.http.params.HttpParams)>",
    "<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement[] parseElements(java.lang.String,org.apache.http.message.HeaderValueParser)>",
    "<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme getScheme(org.apache.http.HttpHost)>",
    "<org.apache.http.protocol.BasicHttpProcessor: org.apache.http.HttpResponseInterceptor getResponseInterceptor(int)>",
    "<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: org.apache.http.impl.conn.tsccm.BasicPoolEntry createEntry(org.apache.http.impl.conn.tsccm.RouteSpecificPool,org.apache.http.conn.ClientConnectionOperator)>",
    "<org.apache.http.auth.NTCredentials: java.lang.String getUserName()>",
    "<org.apache.http.util.EncodingUtils: byte[] getAsciiBytes(java.lang.String)>",
    "<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.RequestDirector createClientRequestDirector(org.apache.http.protocol.HttpRequestExecutor,org.apache.http.conn.ClientConnectionManager,org.apache.http.ConnectionReuseStrategy,org.apache.http.conn.ConnectionKeepAliveStrategy,org.apache.http.conn.routing.HttpRoutePlanner,org.apache.http.protocol.HttpProcessor,org.apache.http.client.HttpRequestRetryHandler,org.apache.http.client.RedirectHandler,org.apache.http.client.AuthenticationHandler,org.apache.http.client.AuthenticationHandler,org.apache.http.client.UserTokenHandler,org.apache.http.params.HttpParams)>",
    "<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.HttpRequestFactory createHttpRequestFactory()>",
    "<org.apache.http.message.HeaderGroup: org.apache.http.Header[] getHeaders(java.lang.String)>",
    "<java.net.URI: java.lang.String getPath()>",
    "<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.io.HttpMessageParser createRequestParser(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpRequestFactory,org.apache.http.params.HttpParams)>",
    "<java.net.Socket: java.io.OutputStream getOutputStream()>",
    "<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>",
    "<org.apache.http.impl.cookie.CookieSpecBase: java.lang.String getDefaultDomain(org.apache.http.cookie.CookieOrigin)>",
    "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>",
    "<android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[])>",
    "<org.apache.http.message.BasicHeaderElementIterator: void parseNextElement()>",
    "<org.apache.http.util.VersionInfo: java.lang.String getRelease()>",
    "<org.apache.http.impl.io.AbstractSessionInputBuffer: int read(byte[],int,int)>",
    "<org.apache.http.impl.cookie.RFC2965PortAttributeHandler: int[] parsePortAttribute(java.lang.String)>",
    "<java.io.File: java.io.File[] listFiles()>",
    "<org.apache.http.util.EncodingUtils: java.lang.String getAsciiString(byte[],int,int)>",
    "<org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter: org.apache.http.impl.conn.AbstractPoolEntry getPoolEntry()>",
    "<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams getClientParams()>",
    "<org.apache.http.message.HeaderGroup: org.apache.http.Header getLastHeader(java.lang.String)>",
    "<java.net.URI: java.lang.String getRawPath()>",
    "<org.apache.http.params.BasicHttpParams: java.lang.Object getParameter(java.lang.String)>",
    "<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams getRequestParams()>",
    "<java.io.File: java.lang.String getAbsolutePath()>",
    "<org.apache.http.util.VersionInfo: org.apache.http.util.VersionInfo loadVersionInfo(java.lang.String,java.lang.ClassLoader)>",
    "<org.apache.http.HttpHost: java.lang.String getHostName()>",
    "<java.net.URI: java.lang.String getQuery()>",
    "<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams getApplicationParams()>",
    "<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>",
    "<org.apache.http.conn.scheme.Scheme: java.lang.String getName()>",
    "<java.lang.Integer: int parseInt(java.lang.String)>",
    "<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: org.apache.http.impl.conn.tsccm.BasicPoolEntry getEntryBlocking(org.apache.http.conn.routing.HttpRoute,java.lang.Object,long,java.util.concurrent.TimeUnit,org.apache.http.impl.conn.tsccm.WaitingThreadAborter)>",
    "<javax.net.ssl.KeyManagerFactory: java.lang.String getDefaultAlgorithm()>",
    "<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.RedirectHandler getRedirectHandler()>",
    "<java.net.Socket: int getReceiveBufferSize()>",
    "<org.apache.http.ProtocolVersion: int getMinor()>",
    "<org.apache.http.impl.client.RequestWrapper: org.apache.http.HttpRequest getOriginal()>",
    "<java.util.zip.ZipEntry: java.lang.String getName()>",
    "<org.apache.http.impl.conn.ProxySelectorRoutePlanner: java.lang.String getHost(java.net.InetSocketAddress)>",
    "<org.apache.http.impl.io.ChunkedInputStream: void parseTrailerHeaders()>",
    "<android.telephony.SmsMessage: long getTimestampMillis()>",
    "<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.Header[] parseHeaders(org.apache.http.io.SessionInputBuffer,int,int,org.apache.http.message.LineParser)>",
    "<org.apache.http.auth.NTCredentials: java.lang.String getDomain()>",
    "<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>",
    "<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.HttpRequest createConnectRequest(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>",
    "<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.HttpRequestExecutor getRequestExecutor()>",
    "<org.apache.http.impl.cookie.RFC2965Spec: int getVersion()>",
    "<org.apache.http.impl.entity.EntityDeserializer: org.apache.http.entity.BasicHttpEntity doDeserialize(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpMessage)>",
    "<org.apache.http.message.BasicNameValuePair: java.lang.String getName()>",
    "<org.apache.http.conn.routing.HttpRoute: java.net.InetAddress getLocalAddress()>",
    "<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.routing.HttpRoutePlanner getRoutePlanner()>",
    "<java.lang.Integer: int parseInt(java.lang.String,int)>",
    "<java.net.InetAddress: java.net.InetAddress getByAddress(java.lang.String,byte[])>",
    "<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>",
    "<android.content.res.Resources: android.content.res.AssetManager getAssets()>",
    "<java.net.Socket: int getPort()>",
    "<android.app.Activity: android.database.Cursor managedQuery(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>",
    "<org.apache.http.client.methods.HttpRequestBase: java.lang.Object clone()>",
    "<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.HttpRequestRetryHandler createHttpRequestRetryHandler()>",
    "<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.impl.entity.EntityDeserializer createEntityDeserializer()>",
    "<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket createSocket()>",
    "<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>",
    "<java.util.Locale: java.util.Locale getDefault()>",
    "<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>",
    "<org.apache.http.impl.conn.tsccm.RouteSpecificPool: int getEntryCount()>",
    "<org.apache.http.message.HeaderGroup: org.apache.http.Header getFirstHeader(java.lang.String)>",
    "<org.apache.http.conn.params.ConnManagerParams: org.apache.http.conn.params.ConnPerRoute getMaxConnectionsPerRoute(org.apache.http.params.HttpParams)>",
    "<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>",
    "<java.net.URI: java.lang.String getHost()>",
    "<android.telephony.TelephonyManager: java.lang.String getLine1Number()>",
    "<java.lang.ThreadLocal: java.lang.Object get()>",
    "<java.security.cert.X509Certificate: java.util.Collection getSubjectAlternativeNames()>",
    "<org.apache.http.impl.client.DefaultUserTokenHandler: java.security.Principal getAuthPrincipal(org.apache.http.auth.AuthState)>",
    "<org.apache.http.cookie.CookieSpecRegistry: org.apache.http.cookie.CookieSpec getCookieSpec(java.lang.String,org.apache.http.params.HttpParams)>",
    "<java.net.InetSocketAddress: int getPort()>",
    "<java.net.Socket: int getSoTimeout()>",
    "<org.apache.http.impl.auth.DigestScheme: java.lang.String createCnonce()>",
    "<org.apache.http.util.ByteArrayBuffer: byte[] toByteArray()>",
    "<org.apache.http.conn.scheme.PlainSocketFactory: org.apache.http.conn.scheme.PlainSocketFactory getSocketFactory()>",
    "<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.HttpRequestRetryHandler getHttpRequestRetryHandler()>",
    "<org.apache.http.client.methods.HttpRequestBase: java.net.URI getURI()>",
    "<org.apache.http.impl.cookie.NetscapeDraftHeaderParser: org.apache.http.HeaderElement parseHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>",
    "<org.apache.http.impl.cookie.BestMatchSpec: org.apache.http.impl.cookie.RFC2109Spec getObsoleteStrict()>",
    "<org.apache.http.impl.conn.AbstractPoolEntry: java.lang.Object getState()>",
    "<org.apache.http.util.ExceptionUtils: java.lang.reflect.Method getInitCauseMethod()>",
    "<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.HttpResponseFactory createHttpResponseFactory()>",
    "<javax.net.ssl.HttpsURLConnection: javax.net.ssl.SSLSocketFactory getDefaultSSLSocketFactory()>",
    "<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost getHopTarget(int)>",
    "<org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>",
    "<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.params.HttpParams getParams()>",
    "<android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)>",
    "<android.telephony.SmsMessage: java.lang.String getOriginatingAddress()>",
    "<org.apache.http.impl.conn.tsccm.RouteSpecificPool: org.apache.http.conn.routing.HttpRoute getRoute()>",
    "<java.net.HttpURLConnection: int getResponseCode()>",
    "<java.util.Calendar: java.util.Date getTime()>",
    "<android.telephony.SmsMessage: java.lang.String getMessageBody()>",
    "<java.net.Socket: java.io.InputStream getInputStream()>",
    "<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>",
    "<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams getOverrideParams()>",
    "<java.net.URI: int getPort()>",
    "<android.content.ContentUris: long parseId(android.net.Uri)>",
    "<android.content.Context: java.lang.Object getSystemService(java.lang.String)>",
    "<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>",
    "<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme get(java.lang.String)>",
    "<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: org.apache.http.impl.conn.tsccm.BasicPoolEntry getFreeEntry(org.apache.http.impl.conn.tsccm.RouteSpecificPool,java.lang.Object)>",
    "<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>",
    "<org.apache.http.auth.AuthScope: java.lang.String getScheme()>",
    "<org.apache.http.impl.client.AbstractAuthenticationHandler: java.util.List getAuthPreferences()>",
    "<org.apache.http.conn.params.ConnRouteParams: java.net.InetAddress getLocalAddress(org.apache.http.params.HttpParams)>",
    "<org.apache.http.ProtocolVersion: int getMajor()>",
    "<android.content.res.AssetManager: java.io.InputStream open(java.lang.String)>",
    "<org.apache.http.cookie.CookieOrigin: java.lang.String getPath()>",
    "<org.apache.http.auth.AuthSchemeRegistry: org.apache.http.auth.AuthScheme getAuthScheme(java.lang.String,org.apache.http.params.HttpParams)>",
    "<java.lang.Long: long parseLong(java.lang.String)>",
    "<org.apache.http.impl.cookie.NetscapeDraftSpec: java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin)>",
    "<java.io.File: java.io.File getParentFile()>",
    "<org.apache.http.auth.NTUserPrincipal: java.lang.String getDomain()>",
    "<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost getTargetHost()>",
    "<org.apache.http.impl.client.RoutedRequest: org.apache.http.conn.routing.HttpRoute getRoute()>",
    "<javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>",
    "<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>",
    "<org.apache.http.ProtocolVersion: java.lang.String getProtocol()>",
    "<java.net.InetSocketAddress: java.lang.String getHostName()>",
    "<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>",
    "<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: org.apache.http.impl.conn.tsccm.RouteSpecificPool getRoutePool(org.apache.http.conn.routing.HttpRoute,boolean)>",
    "<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>",
    "<java.net.Socket: java.net.InetAddress getLocalAddress()>",
    "<org.apache.http.auth.NTCredentials: java.lang.String getPassword()>",
    "<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>",
    "<java.security.MessageDigest: byte[] digest(byte[])>",
    "<java.io.FileInputStream: void <init>",
    "<org.apache.http.params.HttpProtocolParams: java.lang.String getUserAgent(org.apache.http.params.HttpParams)>",
    "<java.util.ArrayList: java.lang.Object get(int)>",
    "<org.apache.http.protocol.BasicHttpProcessor: int getResponseInterceptorCount()>",
    "<org.apache.http.cookie.CookieOrigin: java.lang.String getHost()>",
    "<org.apache.http.auth.NTUserPrincipal: java.lang.String getUsername()>",
    "<org.apache.http.message.HeaderGroup: org.apache.http.Header[] getAllHeaders()>",
    "<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>",
    "<org.apache.http.params.AbstractHttpParams: boolean getBooleanParameter(java.lang.String,boolean)>",
    "<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>",
    "<org.apache.http.impl.client.RequestWrapper: int getExecCount()>",
    "<android.content.Intent: android.os.Bundle getExtras()>",
    "<org.apache.http.HttpHost: int getPort()>",
    "<org.apache.http.auth.AuthScope: java.lang.String getHost()>",
    "<org.apache.http.conn.scheme.Scheme: int getDefaultPort()>",
    "<java.net.ProxySelector: java.net.ProxySelector getDefault()>",
    "<org.apache.http.params.HttpConnectionParams: int getLinger(org.apache.http.params.HttpParams)>",
    "<org.apache.http.util.EncodingUtils: java.lang.String getString(byte[],int,int,java.lang.String)>",
    "<java.lang.String: byte[] getBytes(java.lang.String)>",
    "<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>",
    "<org.apache.http.conn.params.ConnRouteParams: org.apache.http.conn.routing.HttpRoute getForcedRoute(org.apache.http.params.HttpParams)>",
    "<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.impl.entity.EntitySerializer createEntitySerializer()>",
    "<org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getSubjectAlts(java.security.cert.X509Certificate,java.lang.String)>",
    "<org.apache.http.auth.AuthScope: int getPort()>",
    "<java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>",
    "<java.lang.Class: java.lang.String getName()>",
    "<java.net.URI: java.lang.String getFragment()>",
    "<org.apache.http.message.ParserCursor: int getUpperBound()>",
    "<org.apache.http.HttpEntity: java.io.InputStream getContent()>",
    "<org.apache.http.impl.cookie.BestMatchSpec: org.apache.http.impl.cookie.BrowserCompatSpec getCompat()>",
    "<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement[] parseElements(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>",
    "<org.apache.http.message.BasicLineParser: org.apache.http.RequestLine createRequestLine(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion)>",
    "<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost getProxyHost()>",
    "<org.apache.http.params.HttpConnectionParams: boolean getTcpNoDelay(org.apache.http.params.HttpParams)>",
    "<org.apache.http.impl.cookie.RFC2965Spec: java.util.List parse(org.apache.http.HeaderElement[],org.apache.http.cookie.CookieOrigin)>",
    "<java.io.File: boolean delete()>",
    "<java.net.Socket: int getLocalPort()>",
    "<org.apache.http.impl.client.TunnelRefusedException: org.apache.http.HttpResponse getResponse()>",
    "<org.apache.http.protocol.HttpDateGenerator: java.lang.String getCurrentDate()>",
    "<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory()>",
    "<org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)>",
    "<org.apache.http.HttpHost: java.lang.String getSchemeName()>",
    "<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair[] parseParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>",
    "<org.apache.http.conn.routing.RouteTracker: int getHopCount()>",
    "<java.io.File: void <init>",
    "<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>",
    "<org.apache.http.impl.cookie.CookieSpecBase: java.lang.String getDefaultPath(org.apache.http.cookie.CookieOrigin)>",
    "<java.net.InetSocketAddress: java.net.InetAddress getAddress()>",
    "<org.apache.http.params.HttpConnectionParams: int getSocketBufferSize(org.apache.http.params.HttpParams)>",
    "<org.apache.http.message.BasicHttpResponse: java.lang.String getReason(int)>",
    "<android.net.NetworkInfo: java.lang.String getTypeName()>",
    "<org.apache.http.params.HttpProtocolParams: org.apache.http.ProtocolVersion getVersion(org.apache.http.params.HttpParams)>",
    "<org.apache.http.params.HttpConnectionParams: int getConnectionTimeout(org.apache.http.params.HttpParams)>",
    "<org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter: org.apache.http.conn.ClientConnectionManager getManager()>",
    "<org.apache.http.client.params.HttpClientParams: java.lang.String getCookiePolicy(org.apache.http.params.HttpParams)>",
  )

  override val sinkList = List(
    "<org.apache.http.auth.AuthState: void setAuthScope(org.apache.http.auth.AuthScope)>",
    "<org.apache.http.protocol.HttpService: void setConnReuseStrategy(org.apache.http.ConnectionReuseStrategy)>",
    "<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.Header[] parseHeaders(org.apache.http.io.SessionInputBuffer,int,int,org.apache.http.message.LineParser)>",
    "<org.apache.http.impl.cookie.BasicClientCookie: void setPath(java.lang.String)>",
    "<java.lang.StringBuffer: void setCharAt(int,char)>",
    "<java.lang.String: java.lang.String substring(int,int)>",
    "<java.lang.ThreadLocal: void set(java.lang.Object)>",
    "<java.lang.Integer: int parseInt(java.lang.String,int)>",
    "<org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>",
    "<org.apache.http.auth.AuthSchemeRegistry: void register(java.lang.String,org.apache.http.auth.AuthSchemeFactory)>",
    "<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withValue(java.lang.String,java.lang.Object)>",
    "<android.content.ContentValues: void put(java.lang.String,java.lang.String)>",
    "<org.apache.http.message.ParserCursor: void updatePos(int)>",
    "<java.io.OutputStream: void write(byte[],int,int)>",
    "<java.net.URL: java.net.URLConnection openConnection()>",
    "<org.apache.http.message.HeaderGroup: void setHeaders(org.apache.http.Header[])>",
    "<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>",
    "<org.apache.http.client.utils.URLEncodedUtils: void parse(java.util.List,java.util.Scanner,java.lang.String)>",
    "<java.net.Socket: void setSoLinger(boolean,int)>",
    "<java.util.Calendar: void setTimeZone(java.util.TimeZone)>",
    "<org.apache.http.auth.params.AuthParams: void setCredentialCharset(org.apache.http.params.HttpParams,java.lang.String)>",
    "<org.apache.http.auth.AuthState: void setAuthScheme(org.apache.http.auth.AuthScheme)>",
    "<org.apache.http.params.HttpConnectionParams: void setTcpNoDelay(org.apache.http.params.HttpParams,boolean)>",
    "<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>",
    "<java.net.Socket: void setSoTimeout(int)>",
    "<android.app.Activity: void onCreate(android.os.Bundle)>",
    "<org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)>",
    "<org.apache.http.auth.AuthState: void setCredentials(org.apache.http.auth.Credentials)>",
    "<org.apache.http.entity.BasicHttpEntity: void setContent(java.io.InputStream)>",
    "<org.apache.http.impl.io.ChunkedOutputStream: void flushCacheWithAppend(byte[],int,int)>",
    "<org.apache.http.params.HttpProtocolParams: void setVersion(org.apache.http.params.HttpParams,org.apache.http.ProtocolVersion)>",
    "<org.apache.http.impl.io.IdentityOutputStream: void write(byte[],int,int)>",
    "<org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>",
    "<org.apache.http.protocol.UriPatternMatcher: void setHandlers(java.util.Map)>",
    "<org.apache.http.impl.cookie.NetscapeDraftHeaderParser: org.apache.http.HeaderElement parseHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>",
    "<org.apache.http.impl.cookie.DateUtils$DateFormatHolder: java.text.SimpleDateFormat formatFor(java.lang.String)>",
    "<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>",
    "<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>",
    "<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)>",
    "<android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)>",
    "<java.util.Vector: void setSize(int)>",
    "<org.apache.http.impl.io.ContentLengthOutputStream: void write(byte[],int,int)>",
    "<android.content.ContentUris: long parseId(android.net.Uri)>",
    "<org.apache.http.params.BasicHttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>",
    "<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>",
    "<org.apache.http.impl.cookie.BasicClientCookie: void setDomain(java.lang.String)>",
    "<java.util.zip.ZipEntry: void setTime(long)>",
    "<org.apache.http.entity.HttpEntityWrapper: void writeTo(java.io.OutputStream)>",
    "<java.util.zip.ZipEntry: void setSize(long)>",
    "<org.apache.http.cookie.CookieSpecRegistry: void register(java.lang.String,org.apache.http.cookie.CookieSpecFactory)>",
    "<org.apache.http.impl.entity.EntitySerializer: void serialize(org.apache.http.io.SessionOutputBuffer,org.apache.http.HttpMessage,org.apache.http.HttpEntity)>",
    "<android.content.res.AssetManager: java.io.InputStream open(java.lang.String)>",
    "<org.apache.http.impl.cookie.BasicClientCookie2: void setPorts(int[])>",
    "<org.apache.http.conn.params.ConnPerRouteBean: void setDefaultMaxPerRoute(int)>",
    "<java.lang.Long: long parseLong(java.lang.String)>",
    "<org.apache.http.impl.cookie.NetscapeDraftSpec: java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin)>",
    "<org.apache.http.protocol.HttpService: void setHttpProcessor(org.apache.http.protocol.HttpProcessor)>",
    "<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme register(org.apache.http.conn.scheme.Scheme)>",
    "<org.apache.http.protocol.BasicHttpContext: void setAttribute(java.lang.String,java.lang.Object)>",
    "<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>",
    "<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>",
    "<java.lang.StringBuffer: void setLength(int)>",
    "<android.content.ContentProviderOperation: android.content.ContentProviderOperation$Builder newUpdate(android.net.Uri)>",
    "<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.io.HttpMessageParser createResponseParser(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpResponseFactory,org.apache.http.params.HttpParams)>",
    "<org.apache.http.message.HeaderGroup: void updateHeader(org.apache.http.Header)>",
    "<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>",
    "<org.apache.http.entity.AbstractHttpEntity: void setContentEncoding(org.apache.http.Header)>",
    "<java.io.FileOutputStream: void write(byte[],int,int)>",
    "<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>",
    "<java.io.OutputStreamWriter: void <init>",
    "<android.util.Log: int i(java.lang.String,java.lang.String)>",
    "<org.apache.http.entity.SerializableEntity: void createBytes(java.io.Serializable)>",
    "<org.apache.http.params.HttpProtocolParams: void setHttpElementCharset(org.apache.http.params.HttpParams,java.lang.String)>",
    "<android.content.Context: android.content.ComponentName startService(android.content.Intent)>",
    "<java.lang.String: java.lang.String replace(char,char)>",
    "<org.apache.http.entity.AbstractHttpEntity: void setContentType(org.apache.http.Header)>",
    "<java.net.Socket: void setTcpNoDelay(boolean)>",
    "<org.apache.http.impl.client.EntityEnclosingRequestWrapper: void setEntity(org.apache.http.HttpEntity)>",
    "<org.apache.http.impl.io.AbstractSessionOutputBuffer: void write(byte[])>",
    "<java.net.URL: void <init>",
    "<java.io.OutputStream: void write(byte[])>",
    "<org.apache.http.params.HttpProtocolParams: void setUseExpectContinue(org.apache.http.params.HttpParams,boolean)>",
    "<org.apache.http.impl.cookie.DateUtils: java.util.Date parseDate(java.lang.String,java.lang.String[])>",
    "<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.impl.client.RoutedRequest handleResponse(org.apache.http.impl.client.RoutedRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>",
    "<org.apache.http.impl.io.AbstractSessionOutputBuffer: void write(byte[],int,int)>",
    "<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor,char[])>",
    "<org.apache.http.impl.client.RequestWrapper: void setURI(java.net.URI)>",
    "<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>",
    "<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>",
    "<org.apache.http.params.HttpProtocolParams: void setContentCharset(org.apache.http.params.HttpParams,java.lang.String)>",
    "<java.lang.Class: java.lang.Class forName(java.lang.String)>",
    "<org.apache.http.impl.EnglishReasonPhraseCatalog: void setReason(int,java.lang.String)>",
    "<java.util.Calendar: void set(int,int,int,int,int,int)>",
    "<java.lang.String: boolean startsWith(java.lang.String)>",
    "<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse execute(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>",
    "<org.apache.http.protocol.HttpService: void setResponseFactory(org.apache.http.HttpResponseFactory)>",
    "<java.net.Socket: void bind(java.net.SocketAddress)>",
    "<java.util.zip.ZipOutputStream: void write(byte[],int,int)>",
    "<org.apache.http.params.HttpConnectionParams: void setLinger(org.apache.http.params.HttpParams,int)>",
    "<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.io.HttpMessageParser createRequestParser(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpRequestFactory,org.apache.http.params.HttpParams)>",
    "<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>",
    "<java.io.PrintWriter: void println(java.lang.String)>",
    "<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement[] parseElements(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>",
    "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>",
    "<org.apache.http.impl.cookie.RFC2965PortAttributeHandler: int[] parsePortAttribute(java.lang.String)>",
    "<java.io.RandomAccessFile: void write(byte[])>",
    "<org.apache.http.impl.cookie.BasicClientCookie: void setAttribute(java.lang.String,java.lang.String)>",
    "<java.io.File: boolean delete()>",
    "<java.lang.StringBuilder: void setLength(int)>",
    "<org.apache.http.entity.BasicHttpEntity: void setContentLength(long)>",
    "<org.apache.http.impl.conn.AbstractPoolEntry: void setState(java.lang.Object)>",
    "<org.apache.http.impl.conn.tsccm.WaitingThreadAborter: void setWaitingThread(org.apache.http.impl.conn.tsccm.WaitingThread)>",
    "<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>",
    "<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair[] parseParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>",
    "<java.io.FileOutputStream: void <init>",
    "<java.net.ServerSocket: void bind(java.net.SocketAddress)>",
    "<java.text.SimpleDateFormat: void set2DigitYearStart(java.util.Date)>",
    "<org.apache.http.params.HttpProtocolParams: void setUserAgent(org.apache.http.params.HttpParams,java.lang.String)>",
    "<java.lang.Integer: int parseInt(java.lang.String)>",
    "<java.util.Calendar: void set(int,int)>",
    "<org.apache.http.util.ByteArrayBuffer: void setLength(int)>",
    "<org.apache.http.params.HttpConnectionParams: void setStaleCheckingEnabled(org.apache.http.params.HttpParams,boolean)>",
    "<java.lang.Thread: void setDaemon(boolean)>",
    "<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>",
    "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>",
  )
}